JSON OBJ STRUCTURE:

"state": (type: string, example: "0x0001") - script id to match when loading move.
"type": (type: string, example: "01") - sub-type of script (Ex: [A5 {type = "01"} 02] for A5.json or [25 {type = "03"} 02] for 25.json)
"multiple_state": (type: bool) - if true 'state' will be treated as an array of ids instead of a single string. state should be formatted like this when true: [0x0001, 0x0002]
"name": (type: string) - name used to describe script purpose.
"last": (type: string) - name to show in true / false checks relating to the previous check.
"no_arg_text": (type: string) - text to show when there are 0 args.
"args": (type: array) - positional input parameters for the script.
	"index": (type: int) - index of args_list used to get value.
	"prefix": (type: string) - text to place before value.
	"name": (type: string) - name of parameter.
	"cls": (type: string) - enum class used to get name for value, set to null if value doesn't require being represented as a name.
	"type": (type: string) - function used to format value ("format_value" should used for most cases. Set index to -1 to use script id as first value when using: "name_from_enum".).
	"range": (type: bool) - if True 'index' will be treated as an array with 2 elements, using args_list[index] for each to format as: [{value1} to {value2}]. index should be formatted like this when true: [0,1].
	"data": (type = "format_value"):
		"auto": (type: bool, default: False) - if True the value 0 is replaced with 'Auto'.
		"decode": (type: bool, default: False) - if True value will be treated as an encoded value and decoded.
		"negative": (type: bool, default: False) - if True value will be treated as a signed int and be shown as a negative number if needed.
		"prefix": (type: string, default: "") - text to put before value.
		"suffix": (type: string, default: "") - text to put after value.
		"offset": (type: int, default: 0) - number to add to value
		"replace_char": (type: string, default: " ") - only used for enum class string set in 'cls'. This replaces underscores ( _ ) in enum value names.
		"format": (type: bool, default: False) - only used for enum class string set in 'cls'. Capitalizes name of enum value.
		"slice": (type: bool, default: False) - only used for enum class string set in 'cls'. Separates parts of the name of an enum value into an array using _ as a delimitter.
		"slice_index": (type: int, default: 0) - index of string to use from array generated by 'slice' being True.
		"encoded_percent": (type: bool, default: False) - if True value will be treated as an encoded percent, using 'percent_base' as the 100% value.
		"percent_base": (type: int, default: 15360 (0x3c00)) - value to be used as 100% when decoding an encoded percent.

	"data": (type = "name_from_enum"):
		"replace_char": (type: string, default: " ") - only used for enum class string set in 'cls'. This replaces underscores ( _ ) in enum value names.
		"format": (type: bool, default: False) - only used for enum class string set in 'cls'. Capitalizes name of enum value.
		"slice": (type: bool, default: False) - only used for enum class string set in 'cls'. Separates parts of the name of an enum value into an array using _ as a delimitter.
		"slice_index": (type: int, default: 0) - index of string to use from array generated by 'slice' being True.


Valid string values for "cls":
 	"BoolFlag",
        "Button",
        "PaddedButton",
        "EffectPart",
        "EffectTarget",
        "TraceKind",
        "TracePart",
        "InputType",
        "ComboConditions",
        "ReturnState",
        "SpecialState",
        "AssetType",
        "CharacterIndex",
        "Hand",
        "MeterType",
        "MeterAmount",
        "MeterCalcBase",
        "VoiceCategory",
        "RandomVoiceCategory",
        "FacialExpression",
        "AirStunType",
        "LH_Situation",
        "LH_Condition",
        "GI_Type",
        "AttackLevel",
        "StunOverride",
        "ViewTarget",
        "OpponentState",
        "CharacterValue",
        "CharacterID"

		



	