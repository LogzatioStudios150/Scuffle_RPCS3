[Comments]
; scuffle relies on these values to find its data. = 
; after an update or patch, the values may change. = 
; however they can be found again with cheat engine. = 
;  = 
; all these addresses are global which means they are *green* in cheat engine and will be located at the bottom of the list of matching addresses. = 
; global timer (4 bytes): the timer ticks up by 1 every frame and resets to 0 when training mode is reset. there seem to be multiple of these, perhaps all equally good? = 
; p1/p2 input address (2 bytes): input address can be found by holding buttons down. 0 for no button, 1 for a, 2 for b, 4 for k, and 8 for g. combinations are added together. the second part of the input buffer is direction held, so don't hold any directions. don't use the first global address, it picks up inputs for both p1 and p2 in training mode. = 
; p1/p2 movelist address (8 bytes): p1/p2 movelist address: xianghua movelist starting bytes: 4b 48 31 31 00 00 00 00 00 00 00 00 = 
; p1/p2 movelist address: 1. pick xianghua for p1 and p2 2. search for that byte array 3. search for a global address that points to the address of that array. 4.there should be four addresses, use the 1st for p1 and 3rd for p2 = 
; p1/p2 move id (2 bytes): xianghua's a/a/b string has move ids 257/259/262. = 
; p1/p2 move id: there will be multiple matches, pick the third green address. = 
; p1/p2 move id: alternately you are looking for a match that responds without delay and briefly shows '89' while transitioning from 8-way run to standing. = 
; p1/p2 guard damage (2 bytes): xianghua's a/a/b string has gdam 4/4/16. a+b has guard damage 38. = 

[Global Addresses] ; SCV
global_timer = 0xE60D80
p1_input_buffer = 0xDE1E0E
p2_input_buffer = 0xDD03EE
p1_movelist_address = 0xE03E88
p2_movelist_address = 0xE619B8
p1_primary_move_id_address = 0xE03262
p1_secondary_move_id_address = 0xE036BA
p2_primary_move_id_address = 0xE60D92
p2_secondary_move_id_address = 0xE611EA
p1_guard_damage_address = 0xEE5650
p2_guard_damage_address = 0xEE5830

